import React, { useState } from "react";
import styled from "styled-components";
import { motion, AnimatePresence } from "framer-motion";
import {
	Shield,
	ShieldAlert,
	AlertTriangle,
	CheckCircle,
	Info,
	Bug,
	Eye,
	Zap,
	ChevronDown,
	ChevronUp,
	ChevronRight,
} from "lucide-react";
import FunctionExtractionPanel from "./FunctionExtractionPanel";

const PanelContainer = styled(motion.div)`
	background: ${(props) => props.theme.colors.surface};
	border-radius: 12px;
	border: 1px solid ${(props) => props.theme.colors.border};
	overflow: hidden;
	box-shadow: ${(props) => props.theme.shadows.medium};
`;

const PanelHeader = styled.div`
	padding: 1rem 1.5rem;
	border-bottom: 1px solid ${(props) => props.theme.colors.border};
	background: ${(props) => props.theme.colors.surfaceLight};
	display: flex;
	align-items: center;
	justify-content: space-between;
	cursor: pointer;
`;

const PanelTitle = styled.div`
	display: flex;
	align-items: center;
	gap: 0.5rem;
	font-weight: 600;
	color: ${(props) => props.theme.colors.text};
`;

const PanelContent = styled(motion.div)`
	padding: 1.5rem;
`;

const StatusIndicator = styled.div`
	display: flex;
	align-items: center;
	gap: 0.75rem;
	padding: 1rem;
	border-radius: 8px;
	margin-bottom: 1rem;
	background: ${(props) => {
		if (props.status === "vulnerable") return "rgba(255, 71, 87, 0.1)";
		if (props.status === "secure") return "rgba(0, 255, 136, 0.1)";
		return "rgba(160, 163, 177, 0.1)";
	}};
	border: 1px solid
		${(props) => {
			if (props.status === "vulnerable") return props.theme.colors.vulnerability;
			if (props.status === "secure") return props.theme.colors.success;
			return props.theme.colors.border;
		}};
`;

const StatusIcon = styled.div`
	color: ${(props) => {
		if (props.status === "vulnerable") return props.theme.colors.vulnerability;
		if (props.status === "secure") return props.theme.colors.success;
		return props.theme.colors.textSecondary;
	}};
`;

const StatusText = styled.div`
	flex: 1;
`;

const StatusTitle = styled.div`
	font-weight: 600;
	color: ${(props) => props.theme.colors.text};
	margin-bottom: 0.25rem;
`;

const StatusSubtitle = styled.div`
	font-size: 0.9rem;
	color: ${(props) => props.theme.colors.textSecondary};
`;

const ConfidenceBar = styled.div`
	width: 80px;
	height: 6px;
	background: ${(props) => props.theme.colors.border};
	border-radius: 3px;
	overflow: hidden;
	position: relative;
`;

const ConfidenceFill = styled.div`
	height: 100%;
	background: ${(props) => {
		if (props.confidence > 0.7) return props.theme.colors.success;
		if (props.confidence > 0.4) return props.theme.colors.warning;
		return props.theme.colors.vulnerability;
	}};
	width: ${(props) => props.confidence * 100}%;
	border-radius: 3px;
	transition: width 0.3s ease;
`;

const ExplanationSection = styled.div`
	margin-top: 1rem;
`;

const SectionTitle = styled.div`
	display: flex;
	align-items: center;
	gap: 0.5rem;
	font-weight: 600;
	color: ${(props) => props.theme.colors.text};
	margin-bottom: 0.75rem;
`;

const ExplanationText = styled.div`
	font-size: 0.9rem;
	line-height: 1.6;
	color: ${(props) => props.theme.colors.textSecondary};
	background: ${(props) => props.theme.colors.background};
	padding: 1rem;
	border-radius: 6px;
	border: 1px solid ${(props) => props.theme.colors.border};
	white-space: pre-line;
	max-height: ${(props) => (props.collapsed ? "150px" : "none")};
	overflow: hidden;
	position: relative;
`;

const ShowMoreButton = styled.button`
	background: none;
	border: none;
	color: ${(props) => props.theme.colors.primary};
	cursor: pointer;
	display: flex;
	align-items: center;
	gap: 0.5rem;
	font-size: 0.875rem;
	margin-top: 0.5rem;
	padding: 0.5rem;
	border-radius: 4px;
	transition: all 0.2s ease;

	&:hover {
		background: ${(props) => props.theme.colors.primary}20;
	}
`;

const FormattedExplanation = styled.div`
	font-size: 0.9rem;
	line-height: 1.6;
	color: ${(props) => props.theme.colors.textSecondary};

	strong {
		color: ${(props) => props.theme.colors.text};
		font-weight: 600;
	}

	ul {
		margin: 0.5rem 0;
		padding-left: 1.5rem;
		list-style-type: disc;
	}

	li {
		margin-bottom: 0.5rem;
		color: ${(props) => props.theme.colors.textSecondary};
	}
`;

const ProgressContainer = styled.div`
	margin-bottom: 1rem;
`;

const ProgressBar = styled.div`
	width: 100%;
	height: 4px;
	background: ${(props) => props.theme.colors.border};
	border-radius: 2px;
	overflow: hidden;
	margin-bottom: 0.5rem;
`;

const ProgressFill = styled.div`
	height: 100%;
	background: ${(props) => props.theme.colors.primary};
	border-radius: 2px;
	animation: progress 2s ease-in-out infinite;

	@keyframes progress {
		0% {
			transform: translateX(-100%);
		}
		100% {
			transform: translateX(100%);
		}
	}
`;

const ProgressText = styled.div`
	text-align: center;
	font-size: 0.9rem;
	color: ${(props) => props.theme.colors.textSecondary};
`;

const ChipContainer = styled.div`
	display: flex;
	flex-wrap: wrap;
	gap: 0.5rem;
	margin-bottom: 1rem;
`;

const Chip = styled.div`
	display: inline-flex;
	align-items: center;
	gap: 0.25rem;
	padding: 0.25rem 0.5rem;
	border-radius: 12px;
	font-size: 0.75rem;
	font-weight: 500;
	background: ${(props) => {
		switch (props.variant) {
			case "success":
				return props.theme.colors.success + "20";
			case "warning":
				return props.theme.colors.warning + "20";
			case "error":
				return props.theme.colors.vulnerability + "20";
			default:
				return props.theme.colors.border;
		}
	}};
	color: ${(props) => {
		switch (props.variant) {
			case "success":
				return props.theme.colors.success;
			case "warning":
				return props.theme.colors.warning;
			case "error":
				return props.theme.colors.vulnerability;
			default:
				return props.theme.colors.textSecondary;
		}
	}};
	border: 1px solid
		${(props) => {
			switch (props.variant) {
				case "success":
					return props.theme.colors.success + "40";
				case "warning":
					return props.theme.colors.warning + "40";
				case "error":
					return props.theme.colors.vulnerability + "40";
				default:
					return props.theme.colors.border;
			}
		}};
`;

const VulnerableLinesList = styled.div`
	display: flex;
	flex-direction: column;
	gap: 1rem;
`;

const VulnerableLineItem = styled.div`
	padding: 1rem;
	background: ${(props) => props.theme.colors.surface};
	border: 1px solid ${(props) => props.theme.colors.border};
	border-radius: 8px;
`;

const LineHeader = styled.div`
	display: flex;
	align-items: center;
	gap: 0.5rem;
	margin-bottom: 0.75rem;
`;

const CodeBlock = styled.div`
	background: rgba(255, 235, 238, 0.5);
	border: 1px solid rgba(255, 205, 210, 0.5);
	border-radius: 4px;
	padding: 0.75rem;
	margin: 0.5rem 0;
	font-family: "Consolas", "Monaco", "Courier New", monospace;
	font-size: 0.9rem;
	color: ${(props) => props.theme.colors.text};
`;

const LineText = styled.div`
	margin-bottom: 0.5rem;
`;

const LineReason = styled.div`
	font-weight: 500;
	color: ${(props) => props.theme.colors.text};
	margin-bottom: 0.5rem;
`;

const LineSuggestion = styled.div`
	font-size: 0.9rem;
	color: ${(props) => props.theme.colors.textSecondary};
`;

const Divider = styled.div`
	height: 1px;
	background: ${(props) => props.theme.colors.border};
	margin: 1.5rem 0;
	position: relative;

	&::before {
		content: "${(props) => props.title || ""}";
		position: absolute;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
		background: ${(props) => props.theme.colors.surface};
		padding: 0 1rem;
		color: ${(props) => props.theme.colors.textSecondary};
		font-weight: 600;
		font-size: 1rem;
	}
`;

const LoadingSpinner = styled.div`
	width: 24px;
	height: 24px;
	border: 2px solid ${(props) => props.theme.colors.border};
	border-top: 2px solid ${(props) => props.theme.colors.primary};
	border-radius: 50%;
	animation: spin 1s linear infinite;

	@keyframes spin {
		0% {
			transform: rotate(0deg);
		}
		100% {
			transform: rotate(360deg);
		}
	}
`;

const VulnerabilityPanel = ({ result, isAnalyzing }) => {
	const [collapsed, setCollapsed] = useState(true);
	const [isExpanded, setIsExpanded] = useState(true);

	const formatExplanationText = (text) => {
		if (!text) return "";

		return (
			text
				// Convert **bold** to <strong>
				.replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>")
				// Convert bullet points to proper list items
				.replace(/^â€¢ (.*$)/gim, "<li>$1</li>")
				// Wrap consecutive list items in <ul>
				.replace(/(<li>.*<\/li>)/gms, (match) => {
					const lines = match.split("\n").filter((line) => line.trim());
					if (lines.length > 1) {
						return `<ul>${lines.join("")}</ul>`;
					}
					return `<ul>${match}</ul>`;
				})
				// Convert line breaks to paragraphs
				.replace(/\n\n/g, "</p><p>")
				.replace(/^(.+)$/gm, (match, p1) => {
					if (p1.includes("<li>") || p1.includes("<strong>") || p1.includes("**")) {
						return p1;
					}
					return `<p>${p1}</p>`;
				})
				// Clean up extra paragraph tags
				.replace(/<p><\/p>/g, "")
				.replace(/^<p>/, "")
				.replace(/<\/p>$/, "")
		);
	};

	const getStatusInfo = () => {
		if (isAnalyzing) {
			return {
				status: "analyzing",
				icon: Eye,
				title: "Analyzing Code...",
				subtitle: "Running security analysis",
			};
		}

		if (!result) {
			return {
				status: "idle",
				icon: Shield,
				title: "Ready for Analysis",
				subtitle: 'Click "Detect Vulnerability" to start',
			};
		}

		if (result.is_vulnerable) {
			return {
				status: "vulnerable",
				icon: ShieldAlert,
				title: "Vulnerabilities Detected",
				subtitle: `${result.vulnerable_lines?.length || 0} security issues found`,
			};
		}

		return {
			status: "secure",
			icon: CheckCircle,
			title: "Code Appears Secure",
			subtitle: "No obvious vulnerabilities detected",
		};
	};

	const statusInfo = getStatusInfo();
	const StatusIconComponent = statusInfo.icon;

	return (
		<PanelContainer initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.3 }}>
			<PanelHeader onClick={() => setIsExpanded(!isExpanded)}>
				<PanelTitle>
					{statusInfo.icon && <StatusIconComponent size={24} />}
					Vulnerability Analysis - {statusInfo.title}
				</PanelTitle>
				{isAnalyzing && <LoadingSpinner />}
				{!isAnalyzing && (isExpanded ? <ChevronUp size={20} /> : <ChevronDown size={20} />)}
			</PanelHeader>

			<AnimatePresence>
				{isExpanded && (
					<PanelContent
						initial={{ height: 0, opacity: 0 }}
						animate={{ height: "auto", opacity: 1 }}
						exit={{ height: 0, opacity: 0 }}
						transition={{ duration: 0.3 }}>
						<StatusIndicator status={statusInfo.status}>
							<StatusIcon status={statusInfo.status}>
								<StatusIconComponent size={24} />
							</StatusIcon>
							<StatusText>
								<StatusTitle>{statusInfo.title}</StatusTitle>
								<StatusSubtitle>{statusInfo.subtitle}</StatusSubtitle>
							</StatusText>
							{result && (
								<ConfidenceBar>
									<ConfidenceFill confidence={result.confidence} />
								</ConfidenceBar>
							)}
						</StatusIndicator>

						{isAnalyzing && (
							<ProgressContainer>
								<ProgressBar>
									<ProgressFill />
								</ProgressBar>
								<ProgressText>Analyzing code for vulnerabilities...</ProgressText>
							</ProgressContainer>
						)}

						{result && (
							<>
								{/* Confidence and Probability Indicators */}
								<ChipContainer>
									<Chip
										variant={
											result.confidence > 0.7
												? "success"
												: result.confidence > 0.4
												? "warning"
												: "default"
										}>
										Confidence: {(result.confidence * 100).toFixed(1)}%
									</Chip>
									{result.probabilities && (
										<>
											<Chip variant={result.probabilities[0] > 0.5 ? "success" : "default"}>
												Safe: {(result.probabilities[0] * 100).toFixed(1)}%
											</Chip>
											<Chip variant={result.probabilities[1] > 0.5 ? "error" : "default"}>
												Vulnerable: {(result.probabilities[1] * 100).toFixed(1)}%
											</Chip>
										</>
									)}
								</ChipContainer>

								{/* Function Extraction Information */}
								{result.extraction_info && (
									<FunctionExtractionPanel extractionInfo={result.extraction_info} />
								)}

								{/* Analysis Explanation */}
								{result.explanation && (
									<>
										<Divider title="Analysis Details" />
										<ExplanationSection>
											<FormattedExplanation
												dangerouslySetInnerHTML={{
													__html: formatExplanationText(result.explanation),
												}}
											/>
										</ExplanationSection>
									</>
								)}

								{/* Vulnerable Lines */}
								{result.vulnerable_lines && result.vulnerable_lines.length > 0 && (
									<>
										<Divider title="Specific Issues Found" />
										<VulnerableLinesList>
											{result.vulnerable_lines.map((line, index) => (
												<VulnerableLineItem key={index}>
													<LineHeader>
														<Chip variant="warning">
															<AlertTriangle size={12} />
															Line {line.line_number}
														</Chip>
														<Chip variant="error">{line.vulnerability_type}</Chip>
													</LineHeader>

													{line.code && <CodeBlock>{line.code}</CodeBlock>}

													<LineReason>{line.reason}</LineReason>
													<LineSuggestion>{line.fix_suggestion}</LineSuggestion>
												</VulnerableLineItem>
											))}
										</VulnerableLinesList>
									</>
								)}
							</>
						)}
					</PanelContent>
				)}
			</AnimatePresence>
		</PanelContainer>
	);
};

export default VulnerabilityPanel;
